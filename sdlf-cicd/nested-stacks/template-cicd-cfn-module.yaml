AWSTemplateFormatVersion: "2010-09-09"
Description: CICD pipelines to automate SDLF workflows

Parameters:
  pArtifactsBucket:
    Description: The artifacts bucket used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/DevOpsArtifactsBucket
  pKMSKey:
    Description: The KMS key used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/KMS/CICDKeyId

Resources:
  rBuildCloudformationModuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-cicd-build-cfn-module-codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - lambda:List*
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:GetLayer*
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:sdlf-*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !Ref pKMSKey
              - Effect: Allow
                Action:
                  - iam:ListPolicies
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DeleteRole
                  - iam:PassRole
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudFormationManagedUplo-LogAndMetricsDeliveryRol-*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/CloudFormationManagedUploadInfrastructure/*"
              - Effect: Allow
                Action:
                  - cloudformation:RegisterType
                  - cloudformation:SetTypeDefaultVersion
                Resource:
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/MODULE/awslabs::sdlf::*"
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/module/awslabs-sdlf-*"
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/MODULE/*"
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/module/*"
              - Effect: Allow
                Action:
                  - s3:CreateBucket # necessary for CfnUploadInfra stack
                  - s3:PutLifecycleConfiguration # necessary for CfnUploadInfra stack
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:GetEncryptionConfiguration
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBuckets
                  - s3:ListObjectsV2
                  - s3:PutBucketAcl
                  - s3:PutBucketLogging
                  - s3:PutBucketPolicy
                  - s3:PutBucketVersioning
                  - s3:PutEncryptionConfiguration
                  - s3:PutBucketPublicAccessBlock
                  - s3:DeleteBucketPublicAccessBlock
                  - s3:PutObject # necessary for cfn submit
                  - s3:SetBucketEncryption
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::cloudformationmanageduploadinfra-accesslogsbucket-*
                  - !Sub arn:${AWS::Partition}:s3:::cloudformationmanageduploadinfrast-artifactbucket-*
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:PutKeyPolicy
                  - kms:TagResource
                  - kms:EnableKeyRotation
                  - kms:GenerateDataKey*
                  - kms:Decrypt
                Resource:
                  - "*" # TODO
              - Effect: Allow
                Action:
                  - cloudformation:DescribeTypeRegistration
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Misc/Domains/*
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub arn:${AWS::Partition}:iam::*:role/sdlf-cicd-domain-crossaccount-cfn-modules

  rBuildCloudformationModuleStage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: sdlf-cicd-build-cfn-module-codebuild
      Artifacts:
        Type: CODEPIPELINE
      Description: Build a CloudFormation module from Serverless templates
      EncryptionKey: !Ref pKMSKey
      Environment:
        EnvironmentVariables:
          - Name: ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Ref pArtifactsBucket
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      ServiceRole: !Ref rBuildCloudformationModuleRole
      Source:
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.9
              commands:
                - |-
                    pip3 uninstall -y aws-sam-cli
                    aws s3api get-object --bucket "$ARTIFACTS_BUCKET" --key aws-sam-cli-linux-x86_64.zip aws-sam-cli-linux-x86_64.zip \
                    && unzip -q aws-sam-cli-linux-x86_64.zip -d sam-installation
                    ./sam-installation/install \
                    && sam --version
                - pip3 install cloudformation-cli
                - aws s3api get-object --bucket "$ARTIFACTS_BUCKET" --key sam-translate.py sam-translate.py
            build:
              commands:
                - sam package --template-file ./template.yaml --s3-bucket "$ARTIFACTS_BUCKET" --s3-prefix sdlf --output-template-file template.yaml
                - python3 sam-translate.py --template-file=template.yaml --output-template=translated-template.json
                - DOMAIN_ACCOUNTS=$(aws ssm get-parameters-by-path --path "/SDLF/Misc/Domains/" --recursive --query "Parameters[?contains(Name, '/$ENVIRONMENT/AccountId')].Value" --output text)
                - echo "Domain accounts found - $DOMAIN_ACCOUNTS"
                - # aws cloudformation validate-template --template-body file://./translated-template.json
                - |-
                    mkdir module
                    cd module || exit
                    cfn init --artifact-type MODULE --type-name "$DOMAIN_NAME::$TEAM_NAME::$MODULE_NAME::MODULE" && rm fragments/sample.json
                    cp -i -a ../translated-template.json fragments/

                    for DOMAIN_ACCOUNT_ID in $DOMAIN_ACCOUNTS; do
                        temp_role=$(aws sts assume-role --role-arn "arn:${AWS::Partition}:iam::$DOMAIN_ACCOUNT_ID:role/sdlf-cicd-domain-crossaccount-cfn-modules" --role-session-name "codebuild-cfn-module")
                        AWS_ACCESS_KEY_ID=$(echo "$temp_role" | jq .Credentials.AccessKeyId | xargs)
                        AWS_SECRET_ACCESS_KEY=$(echo "$temp_role" | jq .Credentials.SecretAccessKey | xargs)
                        AWS_SESSION_TOKEN=$(echo "$temp_role" | jq .Credentials.SessionToken | xargs)
                        export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN

                        # compare hashes to avoid creating a new module version when there is no change
                        NEW_MODULE="$CODEBUILD_RESOLVED_SOURCE_VERSION"
                        if CURRENT_MODULE=$(aws ssm get-parameter --name "/SDLF/CFN/$DOMAIN_NAME-$TEAM_NAME-$MODULE_NAME-MODULE" --query "Parameter.Value" --output text); then
                          echo "Current module version commit id: $CURRENT_MODULE"
                          echo "New module version commit id: $NEW_MODULE"
                          if [ "$NEW_MODULE" == "$CURRENT_MODULE" ]; then
                            echo "No change since last build, exiting module creation."
                            exit 0
                          fi
                        fi

                        cfn submit --role-arn "arn:${AWS::Partition}:iam::$DOMAIN_ACCOUNT_ID:role/sdlf-cicd-cfn-modules" > cfn.log 2>&1
                        if grep "ValidationError.*CloudFormationManagedUploadInfrastructure.*CREATE_IN_PROGRESS" cfn.log; then
                          aws cloudformation wait stack-create-complete --stack-name "CloudFormationManagedUploadInfrastructure"
                          cfn submit > cfn.log 2>&1
                        elif grep "ValidationError.*CloudFormationManagedUploadInfrastructure.*UPDATE.*_IN_PROGRESS" cfn.log; then
                          aws cloudformation wait stack-update-complete --stack-name "CloudFormationManagedUploadInfrastructure"
                          cfn submit > cfn.log 2>&1
                        fi
                        echo "----- CFN CLI LOGS -----"
                        cat cfn.log
                        echo "----- END CFN CLI LOGS -----"
                        TYPE_VERSION_ARN=$(grep "ProgressStatus.*status COMPLETED" cfn.log | tr "'" '"' | jq -r '.TypeVersionArn')
                        echo "registering new cloudformation module version as default: $TYPE_VERSION_ARN"
                        aws cloudformation set-type-default-version --type MODULE --arn "$TYPE_VERSION_ARN" || exit 1
                        aws ssm put-parameter --name "/SDLF/CFN/$DOMAIN_NAME-$TEAM_NAME-$MODULE_NAME-MODULE" --type "String" --value "$NEW_MODULE" --overwrite
                        echo "done for $DOMAIN_ACCOUNT_ID"
                        rm cfn.log
                    done

                    cd ..
                    rm -Rf module
          artifacts:
            files:
              - "*"
              - "**/*"
        Type: CODEPIPELINE
      TimeoutInMinutes: 5

  ######## SSM OUTPUTS #########
  rBuildCloudformationModuleStageSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/CodeBuild/BuildCloudformationModuleStage
      Type: String
      Value: !Ref rBuildCloudformationModuleStage
      Description: Name of the CodeBuild job that build a CloudFormation module from a SAM template

Outputs:
  oBuildCloudformationModuleStageArn:
    Description: The ARN of the CloudFormation module CodeBuild job
    Value: !GetAtt rBuildCloudformationModuleStage.Arn
